<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!--[1] Target : 핵심관심사항 빈 선언 -->
	<!-- 핵심로직을 구현한 클래스를 빈으로 설정 -->
	<!-- target:advice가 적용되는 클래스 -->
	<bean id="svc" class="sec01_xml.part01_basic.ServiceImp" />
	
	<!-- [2] Aspect : 공통관심사항 빈 선언 -->
	<!-- 공통로직을 구현한 클래스를 빈으로 설정 -->
	<!-- aspect:구현하고자 하는 보조기능(공통기능)-->
	<bean id="common" class="sec01_xml.part01_basic.AspectCommon" />

	<!-- [3] Advice 설정 -->
	<!-- advice:aspect의 실체 구현체(클래스)를 의미 -->
	<!-- pointcut:advice가 적용되는 대상을 지정(핵심로직을 구현할 메소드 지정) -->
	<!-- namespaces 탭에서 aop 체크해야 aop 기능 사용 가능 & maven repository 에서 "aspectj" 라이브러리 추가해야함!! -->
	<aop:config> <!-- AOP를 정의하는 최상위 엘리먼트 -->
		<aop:aspect ref="common">
			<!-- [방법 1] 매개변수 수에 따라 핵심 메소드 호출 : *로 매개변수의 개수 지정. -->
			<!--  aop:before 키워드 -> prn1()메소드(핵심기능) 실행하기전에 comm1() 메소드(공통기능)를 실행해라 -->
			<!-- method 속성 : 참조하는 "common" bean 객체의 메소드명 -->
<!-- 			<aop:before method="comm1" pointcut="execution(* sec01_xml.ServiceImp.prn1())" /> -->
			
			<!--  prn1(*)메소드(핵심기능) 실행하기전에 comm1() 메소드(공통기능)를 실행해라 -->
<!-- 			<aop:before method="comm1"	pointcut="execution(* sec01_xml.ServiceImp.prn1(*))" /> -->
			
			<!--  prn1(*, *)메소드(핵심기능) 실행하기전에 comm1() 메소드(공통기능)를 실행해라 -->
<!-- 			<aop:before method="comm1"	pointcut="execution(* sec01_xml.ServiceImp.prn1(*,*))" />  -->
			<!-- <aop:before method="comm1"	pointcut="execution(* * sec01_xml.ServiceImp.prn1(*,*))" />  -->
			                                                                       <!-- * : 접근 제한자(public, ...) 생략 가능 -->
			                                                                       <!-- *: 리턴타입을 의미. 현재 어떤 리턴 타입이 오더라도 상관 없음 -->
			<!-- ############################################################## -->
													                               
			<!-- [방법 2] 매개변수 수에 상관없이 같은 이름의 메소드(오버로딩)를 모두 호출 : .. 으로 모든 매개변수라는 의미 표시-->
			<!-- 오버로딩된 모든 prn1() 메소드 실행전에 comm1 실행 -->
<!-- 			<aop:before method="comm1" pointcut="execution(void sec01_xml.ServiceImp.prn1(..))"/> -->
			
			<!-- [참고] 같은 프로젝트에 클래스명은 다른데 메소드명은 같을때...한번에 설정할 수도 있음.
				               sec01_xml.ServiceImp.prn5(..)
				               sec01_xml.TestImp.prn5(..)
				               sec01_xml.SampleImp.prn5(..)  => sec01_xml..prn5(..)  -->
			<!-- ############################################################ -->
				               
			<!-- [방법3]. pointcut 모아놓는 게 좋음 -->    																									
			<!-- 공통 로직 실행 시 pointcut에 설정한 id 참조 -->    																									
			<aop:pointcut expression="execution(void sec01_xml.part01_basic.ServiceImp.prn1(..))" id="prn1"/>
			<aop:pointcut expression="execution(void sec01_xml.part01_basic.ServiceImp.prn2(..))" id="prn2"/>
			<aop:pointcut expression="execution(String sec01_xml.part01_basic.ServiceImp.prn3(..))" id="prn3"/>
			<aop:pointcut expression="execution(* sec01_xml.part01_basic.ServiceImp.prn4(..))" id="prn4"/>
			<aop:pointcut expression="execution(* sec01_xml.part01_basic.ServiceImp.prn5(..))" id="prn5"/>
			
			
			<!-- advice -->
			<aop:before method="comm1" pointcut-ref="prn1" />
			<aop:after method="comm2" pointcut-ref="prn2" />
			
			<!-- after-returning:핵심기능(prn3()) 에서 공통기능(comm3)으로 전달(리턴)하는 값이 있을때 -->
			<!-- returning : 핵심로직(prn3)에서 넘어오는 값(return "홍길동")을 받는 파라미터(comm3에서 받는 매개변수 이름)와 동일하게 설정해야함. -->
			 <!-- prn3 메소드의 리턴값을 comm3의 매개변수로 넘긴다.(returning의 변수명과 comm3의 매개변수명이 동일해야함 -->
			<aop:after-returning method="comm3" pointcut-ref="prn3" returning="name"/>
			
			<!-- prn4() 실행 도중 예외 발생하면 comm4() 메소드 실행. -->
			<!-- prn4() 실행 시 예외 발생하지 않으면(정상실행되면) comm4() 메소드는 실행되지 않는다 -->                              
			<!-- throwing : 핵심로직(prn4)에서 예외가 발생되면, comm4(Exception ex) 에서 파라미터(ex)로 예외를 받아 예외 처리 실행 -->
			<aop:after-throwing method="comm4" pointcut-ref="prn4" throwing="ex" />
			                                                                                        
			 <!-- around : pointcut에 정의된 핵심기능의 시작 전, 종료 후에 comm5() 메소드를 실행 -->
			 <!-- comm5 -> prn5 실행 -> comm5  -->
			 <aop:around method="comm5" pointcut-ref="prn5" />
			 
		</aop:aspect>
	</aop:config>
	
</beans>
